-- Quartus Prime VHDL Template
-- Single-port single_port_ram_with_init with single read/write address and initial contents	

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity single_port_ram_with_init is

	generic 
	(
		DATA_WIDTH : natural := 32;
		ADDR_WIDTH : natural := 8
	);

	port 
	(
		clk	: in std_logic;
		addr	: in natural range 0 to 2**ADDR_WIDTH - 1;
		data	: in std_logic_vector((DATA_WIDTH-1) downto 0);
		we		: in std_logic := '1';
		q		: out std_logic_vector((DATA_WIDTH -1) downto 0)
	);

end single_port_ram_with_init;

architecture rtl of single_port_ram_with_init is


-- Build a 2-D array type for the RAM
	subtype word_t is std_logic_vector((DATA_WIDTH-1) downto 0);
	type memory_t is array(2**ADDR_WIDTH-1 downto 0) of word_t;

	function init_ram
		return memory_t is 
		variable tmp : memory_t := (others => (others => '0'));
	begin 
		for addr_pos in 0 to 2**ADDR_WIDTH - 1 loop 
			-- Initialize each address with the address itself
			tmp(addr_pos) := std_logic_vector(to_unsigned(addr_pos, DATA_WIDTH));
		end loop;
		tmp(0) := x"FFFFFFFF";
		tmp(1) := x"AAAAAAAA";
		tmp(2) := x"BBBBBBBB";
		tmp(3) := x"CCCCCCCC";
		tmp(4) := x"DDDDDDDD";
		tmp(5) := x"EEEEEEEE";
		tmp(6) := x"FAFAFAFA";
		tmp(7) := x"FBFBFBFB";
		tmp(8) := x"FCFCFCFC";
		tmp(9) := x"FDFDFDFD";
		tmp(10) := x"FEFEFEFE";
		tmp(11) := x"ABABABAB";
		tmp(12) := x"ACACACAC";
		return tmp;
	end init_ram;	 

	-- Declare the RAM signal and specify a default value.	Quartus Prime
	-- will create a memory initialization file (.mif) based on the 
	-- default value.
	signal ram : memory_t := init_ram;

	-- Register to hold the address 
	signal addr_reg : natural range 0 to 2**ADDR_WIDTH-1;
	

begin

	process(addr)
		begin
		if(rising_edge(clk)) then
			if(we = '1') then
				(addr) <= data;
			end if;

			-- Register the address for reading
			
		end if;
		addr_reg <= addr;
		end process;

		q <= ram(addr_reg);

end rtl;