library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity decodeur is
    port (
        instr       : in  std_logic_vector(31 downto 0);  -- Instruction de 32 bits
        aluOp       : out std_logic_vector(3 downto 0);   -- Code opératoire ALU (à compléter)
        WriteEnable : out std_logic;                      -- Signal d'écriture dans le registre
        load        : out std_logic                       -- Signal pour le compteur
    );
end entity decodeur;

architecture Behavioral of decodeur is

    signal opcode   : std_logic_vector(6 downto 0);
    signal funct3   : std_logic_vector(2 downto 0);
    signal funct7   : std_logic_vector(6 downto 0);
	 
begin
    -- Extraire les champs de l'instruction
    opcode   <= instr(6 downto 0);  -- Bits [6:0] pour l'opcode
    funct3   <= instr(14 downto 12); -- Bits [14:12] pour funct3
    funct7   <= instr(31 downto 25); -- Bits [31:25] pour funct7

	process(instr)
	begin
		 -- Initialiser les signaux
		 WriteEnable <= '1';  -- Active l'écriture dans les registres
		 load <= '0';         -- Désactive le compteur (PC)

		 -- Décoder l'instruction basée sur opcode, funct3 et funct7
		 case instr(6 downto 0) is  -- Opcode
			  when "0110011" =>  -- Instructions de type R
					case instr(14 downto 12) & instr(31 downto 25) is
					
						 -- ADD
						 when "000" & "0000000" =>
							  aluOp <= "0000";  -- Code ALU pour ADD
							  
						 -- SUB
						 when "000" & "0100000" =>
							  aluOp <= "0001";  -- Code ALU pour SUB
							  
						 -- SLL (Shift Logical Left)
						 when "001" & "0000000" =>
							  aluOp <= "0010";  -- Code ALU pour SLL
							  
						 -- SLT (Set Less Than)
						 when "010" & "0000000" =>
							  aluOp <= "0011";  -- Code ALU pour SLT
							  
						 -- SLTU (Set Less Than Unsigned)
						 when "011" & "0000000" =>
							  aluOp <= "0100";  -- Code ALU pour SLTU
							  
						 -- XOR
						 when "100" & "0000000" =>
							  aluOp <= "0101";  -- Code ALU pour XOR
							  
						 -- SRL (Shift Logical Right)
						 when "101" & "0000000" =>
							  aluOp <= "0110";  -- Code ALU pour SRL
							  
						 -- SRA (Shift Arithmetic Right)
						 when "101" & "0100000" =>
							  aluOp <= "0111";  -- Code ALU pour SRA
							  
						 -- OR
						 when "110" & "0000000" =>
							  aluOp <= "1000";  -- Code ALU pour OR
							  
						 -- AND
						 when "111" & "0000000" =>
							  aluOp <= "1001";  -- Code ALU pour AND
							  
						 -- Valeur par défaut
						 when others =>
							  aluOp <= "XXXX";  -- Erreur de décodage
							  
					end case;
			  when others =>
					aluOp <= "XXXX";  -- Valeur par défaut si l'opcode n'est pas reconnu
		 end case;
	end process;

end architecture Behavioral;
