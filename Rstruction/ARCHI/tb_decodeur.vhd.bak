library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity tb_decodeur is
end entity tb_decodeur;

architecture sim of tb_decodeur is
    -- Déclaration des signaux
    signal instr        : std_logic_vector(31 downto 0);
    signal aluOp       : std_logic_vector(3 downto 0);
    signal WriteEnable  : std_logic;
    signal load        : std_logic;

    -- Instanciation de l'unité sous test (UUT)
    component decodeur
        port (
            instr       : in  std_logic_vector(31 downto 0);
            aluOp       : out std_logic_vector(3 downto 0);
            WriteEnable  : out std_logic;
            load        : out std_logic
        );
    end component;

begin

    -- Instanciation de l'UUT
    uut: decodeur
        port map (
            instr       => instr,
            aluOp       => aluOp,
            WriteEnable  => WriteEnable,
            load        => load
        );

    -- Processus de test
    process
    begin
        -- Initialiser les signaux
        WriteEnable <= '0';  -- Vous pouvez initialiser ce signal selon votre besoin
        load <= '0';         -- Idem ici

        -- Appliquer les instructions et vérifier les résultats
        for i in 0 to 9 loop
            case i is
                when 0 =>
                    instr <= "00000000000100001000000000110011";  -- ADD
                    wait for 10 ns;  
                    assert aluOp = "0000" report "aluOp for ADD failed" severity error;

                when 1 =>
                    instr <= "00000000000100001000000000110001";  -- SUB
                    wait for 10 ns;  
                    assert aluOp = "0001" report "aluOp for SUB failed" severity error;

                when 2 =>
                    instr <= "00000000000100001000000000000100";  -- SLL
                    wait for 10 ns;  
                    assert aluOp = "0010" report "aluOp for SLL failed" severity error;

                when 3 =>
                    instr <= "00000000000100001000000000000101";  -- SLT
                    wait for 10 ns;  
                    assert aluOp = "0011" report "aluOp for SLT failed" severity error;

                when 4 =>
                    instr <= "00000000000100001000000000000110";  -- SLTU
                    wait for 10 ns;  
                    assert aluOp = "0100" report "aluOp for SLTU failed" severity error;

                when 5 =>
                    instr <= "00000000000100001000000000000111";  -- XOR
                    wait for 10 ns;  
                    assert aluOp = "0101" report "aluOp for XOR failed" severity error;

                when 6 =>
                    instr <= "00000000000100001000000000001000";  -- SRL
                    wait for 10 ns;  
                    assert aluOp = "0110" report "aluOp for SRL failed" severity error;

                when 7 =>
                    instr <= "00000000000100001000000000001001";  -- OR
                    wait for 10 ns;  
                    assert aluOp = "0111" report "aluOp for OR failed" severity error;

                when 8 =>
                    instr <= "00000000000100001000000000001010";  -- AND
                    wait for 10 ns;  
                    assert aluOp = "1000" report "aluOp for AND failed" severity error;

                when 9 =>
                    instr <= "00000000000100001000000000001011";  -- SUBU
                    wait for 10 ns;  
                    assert aluOp = "1001" report "aluOp for SUBU failed" severity error;

                when others =>
                    null;  -- Ne rien faire
            end case;
        end loop;

        report "Simulation Finished";
        wait;  -- Garder la simulation active
    end process;

end architecture sim;
